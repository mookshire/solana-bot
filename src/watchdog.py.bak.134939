from __future__ import annotations
import json, os, sys, time, subprocess
from pathlib import Path
from datetime import datetime

ROOT = Path(__file__).resolve().parents[1]
DATA = ROOT / "data"
DATA.mkdir(parents=True, exist_ok=True)

HEARTBEAT = DATA / "heartbeat.txt"          # written by main loop
STATEFILE = DATA / "watchdog_state.json"    # persisted counters

WINDOW_S = int(os.getenv("WATCHDOG_ALERT_WINDOW_S", "120"))     # secs allowed
THRESH   = int(os.getenv("WATCHDOG_ALERT_THRESHOLD", "2"))      # restarts allowed in window

def now_ts() -> float:
    return time.time()

def read_state():
    if not STATEFILE.exists():
        return {"restarts": []}
    try:
        return json.loads(STATEFILE.read_text() or "{}") or {"restarts": []}
    except Exception:
        return {"restarts": []}

def write_state(state):
    try:
        STATEFILE.write_text(json.dumps(state))
    except Exception as e:
        print(f"[watchdog] WARN: failed to write state: {e}", file=sys.stderr)

def heartbeat_age_s() -> float:
    if not HEARTBEAT.exists():
        return 10**9
    try:
        # age based on file mtime; falls back to content if present
        mtime = HEARTBEAT.stat().st_mtime
        return max(0.0, now_ts() - mtime)
    except Exception:
        return 10**9

def restart_bot():
    print("[watchdog] restarting solana-bot.service …")
    subprocess.run(["systemctl", "restart", "solana-bot.service"], check=False)

def main():
    age = heartbeat_age_s()
    print(f"[watchdog] heartbeat age={int(age)}s (<= {WINDOW_S}s?)")
    if age <= WINDOW_S:
        print("[watchdog] healthy ✔")
        return 0

    # unhealthy → restart + rate-limit using state file
    st = read_state()
    ts = int(now_ts())
    st.setdefault("restarts", [])
    st["restarts"].append(ts)
    # keep only recent restarts within WINDOW_S
    st["restarts"] = [t for t in st["restarts"] if ts - t <= WINDOW_S]
    write_state(st)

    if len(st["restarts"]) > THRESH:
        print(f"[watchdog] too many restarts in {WINDOW_S}s (>{THRESH}); exiting with code 2 to stop looping")
        return 2  # our systemd unit treats 2 as SuccessExitStatus

    restart_bot()
    return 0

if __name__ == "__main__":
    sys.exit(main())
